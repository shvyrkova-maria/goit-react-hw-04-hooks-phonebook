{"version":3,"sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/App/App.styled.js","components/App/App.jsx","index.js"],"names":["SectionWrap","SectionTitle","Section","title","children","FormContainer","Form","Label","Button","ValidationMessage","validationSchema","Yup","shape","name","min","max","required","number","phone","ContactsForm","onSubmit","nameInputId","nanoid","phoneInputId","initialValues","values","resetForm","id","htmlFor","type","placeholder","component","Contacts","ContactsItem","ContactsDetails","ContactsList","contacts","onDeleteClick","map","size","onClick","Filter","filter","onChange","value","debounceTimeout","Container","App","useState","setContacts","setFilter","useEffect","savedContacts","localStorage","getItem","parsedSavedContacts","JSON","parse","setItem","stringify","filtered","normalizeFilter","toLowerCase","contact","includes","filteredContacts","newContact","some","alert","event","target","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEO,IAAMA,EAAW,yFAIXC,EAAY,8G,OCWVC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,eAACJ,EAAD,WACE,cAACC,EAAD,UAAeE,IACdC,M,+BCJA,IAAMC,EAAgB,YAAOC,IAAP,qBAAH,8DAKbC,EAAK,sGAKLC,EAAM,yXAmBNC,EAAiB,4HCrBxBC,EAAmBC,WAAaC,MAAM,CAC1CC,KAAMF,WACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,OAAQN,WAAaO,MAAM,OAAO,EAAM,qCA0C3BC,MAvCf,YAAqC,IAAbC,EAAY,EAAZA,SAClBC,EAAcC,YAAO,GACrBC,EAAeD,YAAO,GAE1B,OACE,cAAC,IAAD,CACEE,cAAe,CAAEX,KAAM,GAAII,OAAQ,IACnCP,iBAAkBA,EAClBU,SAAU,SAACK,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACXb,EAAiBY,EAAjBZ,KAAMI,EAAWQ,EAAXR,OACdG,EAAS,CAAEO,GAAIL,YAAO,GAAIT,OAAMI,WAChCS,KANJ,SASE,eAACrB,EAAD,WACE,cAACE,EAAD,CAAOqB,QAAO,aAAQP,GAAtB,kBACA,cAAC,IAAD,CACER,KAAK,OACLgB,KAAK,OACLF,GAAE,aAAQN,GACVS,YAAY,SAEd,cAAC,IAAD,CAAcjB,KAAK,OAAOkB,UAAWtB,IAErC,cAACF,EAAD,CAAOqB,QAAO,aAAQL,GAAtB,oBACA,cAAC,IAAD,CACEV,KAAK,SACLgB,KAAK,MACLF,GAAE,aAAQJ,GACVO,YAAY,kBAEd,cAAC,IAAD,CAAcjB,KAAK,SAASkB,UAAWtB,IAEvC,cAACD,EAAD,CAAQqB,KAAK,SAAb,+B,QClDD,IAAMG,EAAQ,iFAIRC,EAAY,0SAgBZC,EAAe,iIAUf1B,EAAM,6WCQJ2B,MA/Bf,YAAoD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAChC,OACE,cAACL,EAAD,UACGI,EAASE,KAAI,YAA2B,IAAxBX,EAAuB,EAAvBA,GAAId,EAAmB,EAAnBA,KAAMI,EAAa,EAAbA,OACzB,OACE,eAACgB,EAAD,WACE,gCACE,eAACC,EAAD,WACE,cAAC,IAAD,CAAQK,KAAM,KACd,+BAAO1B,OAET,eAACqB,EAAD,WACE,cAAC,IAAD,CAAYK,KAAM,KAClB,+BAAOtB,UAGX,cAAC,EAAD,CAAQY,KAAK,SAASW,QAAS,kBAAMH,EAAcV,IAAnD,sBAXiBA,S,QCSdc,MAnBf,YAAuC,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACxB,OACE,cAAC,gBAAD,CACEhB,GAAE,aAAQL,YAAO,IACjBO,KAAK,OACLhB,KAAK,OACL+B,MAAOF,EACPG,gBAAiB,IACjBF,SAAUA,EACVb,YAAY,YCXX,IAAMgB,EAAS,iOC8DPC,MAzDf,WACE,MAAgCC,mBAAS,CACvC,CAAErB,GAAI,OAAQd,KAAM,gBAAiBI,OAAQ,aAC7C,CAAEU,GAAI,OAAQd,KAAM,iBAAkBI,OAAQ,eAFhD,mBAAOmB,EAAP,KAAiBa,EAAjB,KAIA,EAA4BD,mBAAS,IAArC,mBAAON,EAAP,KAAeQ,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAgBC,aAAaC,QAAQ,YACrCC,EAAsBC,KAAKC,MAAML,GACnCG,GACFN,EAAYM,KAEb,IAEHJ,qBAAU,WACRE,aAAaK,QAAQ,WAAYF,KAAKG,UAAUvB,MAC/C,CAACA,IAEJ,IAwBMwB,EAVmB,WACvB,IAAMC,EAAkBnB,EAAOoB,cAE/B,OAAO1B,EAASM,QACd,SAAAqB,GAAO,OACLA,EAAQlD,KAAKiD,cAAcE,SAASH,IACpCE,EAAQ9C,OAAO+C,SAASH,MAIbI,GACjB,OACE,eAACnB,EAAD,WACE,cAAC,EAAD,CAAS3C,MAAM,YAAf,SACE,cAAC,EAAD,CAAciB,SA5BD,SAAA8C,GACjB9B,EAAS+B,MAAK,qBAAGtD,OAAoBqD,EAAWrD,QAC5CuD,MAAM,WAAD,OAAYF,EAAWrD,KAAvB,oBACLoC,EAAY,CAACiB,GAAF,mBAAiB9B,UA2B9B,eAAC,EAAD,CAASjC,MAAM,WAAf,UACE,cAAC,EAAD,CAAQuC,OAAQA,EAAQC,SAnBP,SAAA0B,GAAK,OAAInB,EAAUmB,EAAMC,OAAO1B,UAoBjD,cAAC,EAAD,CAAcR,SAAUwB,EAAUvB,cA1BlB,SAAAkC,GACpBtB,GAAY,SAAAb,GAAQ,OAClBA,EAASM,QAAO,SAAAqB,GAAO,OAAIA,EAAQpC,KAAO4C,kBC5BhDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.75a60f15.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nexport const SectionWrap = styled.section`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  text-transform: uppercase;\r\n  margin-bottom: 15px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { SectionWrap, SectionTitle } from 'components/Section/Section.styled';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <SectionWrap>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {children}\r\n    </SectionWrap>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import { Form } from 'formik';\r\nimport styled from '@emotion/styled/macro';\r\n\r\nexport const FormContainer = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-top: 15px;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  width: 300px;\r\n  padding: 12px 12px;\r\n  margin-top: 15px;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  color: var(--text-color);\r\n  background-color: lightslategray;\r\n  text-transform: uppercase;\r\n  border-radius: 5px;\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 4px 3px 12px -1px var(--accent-color);\r\n  }\r\n`;\r\n\r\nexport const ValidationMessage = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n`;\r\n","import { nanoid } from 'nanoid';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport 'yup-phone';\r\nimport {\r\n  FormContainer,\r\n  Button,\r\n  Label,\r\n  ValidationMessage,\r\n} from 'components/ContactsForm/ContactsForm.styled';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Required'),\r\n  number: Yup.string().phone('+38', true, 'Valid number type +380*********'),\r\n});\r\n\r\nfunction ContactsForm({ onSubmit }) {\r\n  let nameInputId = nanoid(3);\r\n  let phoneInputId = nanoid(3);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: '', number: '' }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values, { resetForm }) => {\r\n        const { name, number } = values;\r\n        onSubmit({ id: nanoid(3), name, number });\r\n        resetForm();\r\n      }}\r\n    >\r\n      <FormContainer>\r\n        <Label htmlFor={`id-${nameInputId}`}>Name</Label>\r\n        <Field\r\n          name=\"name\"\r\n          type=\"text\"\r\n          id={`id-${nameInputId}`}\r\n          placeholder=\"Name\"\r\n        />\r\n        <ErrorMessage name=\"name\" component={ValidationMessage} />\r\n\r\n        <Label htmlFor={`id-${phoneInputId}`}>Number</Label>\r\n        <Field\r\n          name=\"number\"\r\n          type=\"tel\"\r\n          id={`id-${phoneInputId}`}\r\n          placeholder=\"+380*********\"\r\n        />\r\n        <ErrorMessage name=\"number\" component={ValidationMessage} />\r\n\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </FormContainer>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default ContactsForm;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Contacts = styled.ul`\r\n  margin-top: 15px;\r\n`;\r\n\r\nexport const ContactsItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  padding: 10px 12px;\r\n  border: 1px solid var(--main-color);\r\n  border-radius: 5px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  &:hover {\r\n    background-color: var(--bg-hover-color);\r\n  }\r\n`;\r\n\r\nexport const ContactsDetails = styled.p`\r\n  & > span {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  min-width: 150px;\r\n  padding: 8px 12px;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  color: var(--text-color);\r\n  text-transform: uppercase;\r\n  background-color: lightslategray;\r\n  border-radius: 5px;\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 4px 3px 12px -1px var(--accent-color);\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FaUser, FaPhoneAlt } from 'react-icons/fa';\r\nimport {\r\n  Contacts,\r\n  ContactsItem,\r\n  ContactsDetails,\r\n  Button,\r\n} from 'components/ContactsList/ContactsList.styled';\r\n\r\nfunction ContactsList({ contacts, onDeleteClick }) {\r\n  return (\r\n    <Contacts>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <ContactsItem key={id}>\r\n            <div>\r\n              <ContactsDetails>\r\n                <FaUser size={14} />\r\n                <span>{name}</span>\r\n              </ContactsDetails>\r\n              <ContactsDetails>\r\n                <FaPhoneAlt size={14} />\r\n                <span>{number}</span>\r\n              </ContactsDetails>\r\n            </div>\r\n            <Button type=\"button\" onClick={() => onDeleteClick(id)}>\r\n              Delete\r\n            </Button>\r\n          </ContactsItem>\r\n        );\r\n      })}\r\n    </Contacts>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n  onDeleteClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nfunction Filter({ filter, onChange }) {\r\n  return (\r\n    <DebounceInput\r\n      id={`id-${nanoid(3)}`}\r\n      type=\"text\"\r\n      name=\"name\"\r\n      value={filter}\r\n      debounceTimeout={700}\r\n      onChange={onChange}\r\n      placeholder=\"Search\"\r\n    />\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 650px;\r\n  padding: 30px 30px 0 30px;\r\n  background-color: var(--text-color);\r\n  border: 1px solid var(--text-color);\r\n  border-radius: 5px;\r\n`;\r\n","import { useState, useEffect } from 'react';\nimport Section from 'components/Section/Section';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport { Container } from 'components/App/App.styled';\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const savedContacts = localStorage.getItem('contacts');\n    const parsedSavedContacts = JSON.parse(savedContacts);\n    if (parsedSavedContacts) {\n      setContacts(parsedSavedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = newContact => {\n    contacts.some(({ name }) => name === newContact.name)\n      ? alert(`Contact ${newContact.name} already exists`)\n      : setContacts([newContact, ...contacts]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts =>\n      contacts.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const getFilterValue = event => setFilter(event.target.value);\n\n  const filteredContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizeFilter) ||\n        contact.number.includes(normalizeFilter),\n    );\n  };\n\n  const filtered = filteredContacts();\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactsForm onSubmit={addContact} />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter filter={filter} onChange={getFilterValue} />\n        <ContactsList contacts={filtered} onDeleteClick={deleteContact} />\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from 'components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}